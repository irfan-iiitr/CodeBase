/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void flatten(TreeNode* root) {
        if(!root) return;
        stack<TreeNode*> st;
        st.push(root);

        while(!st.empty()){
            auto node=st.top(); st.pop();
            if(node->right!=NULL){
                st.push(node->right); //push right first then left
            }
            if(node->left!=NULL){
                st.push(node->left);  //so that left remains on top
            }
            if(!st.empty()){
                node->right=st.top();   //take the left..point node->right to left node
           }
           node->left=NULL; //make left part =NULL;
        }
    }
};